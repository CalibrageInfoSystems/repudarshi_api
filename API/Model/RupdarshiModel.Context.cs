//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RupdarshiEntities : DbContext
    {
        public RupdarshiEntities()
            : base("name=RupdarshiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityRight> ActivityRights { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClassType> ClassTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DeliverySlot> DeliverySlots { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderProductXref> OrderProductXrefs { get; set; }
        public virtual DbSet<OrderStatusHistory> OrderStatusHistories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductRepository> ProductRepositories { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Role1> Roles1 { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<TypeCdDmt> TypeCdDmts { get; set; }
        public virtual DbSet<UserCart> UserCarts { get; set; }
        public virtual DbSet<UserCartProductXref> UserCartProductXrefs { get; set; }
        public virtual DbSet<UserClaim> UserClaims { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VendorInfo> VendorInfoes { get; set; }
        public virtual DbSet<VendorStatusHistory> VendorStatusHistories { get; set; }
    
        [DbFunction("RupdarshiEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[RupdarshiEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int AddUpdateCategory(Nullable<int> id, string name1, string name2, Nullable<int> parentCategoryId, Nullable<int> categoryLevel, string fileName, string fileLocation, string fileExtension, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var parentCategoryIdParameter = parentCategoryId.HasValue ?
                new ObjectParameter("ParentCategoryId", parentCategoryId) :
                new ObjectParameter("ParentCategoryId", typeof(int));
    
            var categoryLevelParameter = categoryLevel.HasValue ?
                new ObjectParameter("CategoryLevel", categoryLevel) :
                new ObjectParameter("CategoryLevel", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileLocationParameter = fileLocation != null ?
                new ObjectParameter("FileLocation", fileLocation) :
                new ObjectParameter("FileLocation", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateCategory", idParameter, name1Parameter, name2Parameter, parentCategoryIdParameter, categoryLevelParameter, fileNameParameter, fileLocationParameter, fileExtensionParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateCity(Nullable<int> id, string name1, string name2, string code, Nullable<int> countryId, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateCity", idParameter, name1Parameter, name2Parameter, codeParameter, countryIdParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateCountry(Nullable<int> id, string name1, string name2, string code, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateCountry", idParameter, name1Parameter, name2Parameter, codeParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateCustomerInfo(Nullable<int> id, string userId, string firstName, string lastName, string middleName, string contactNumber, string email, string userName, string password, string address, string landmark, Nullable<int> countryId, Nullable<int> cityId, Nullable<int> locationId, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string deviceToken, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var deviceTokenParameter = deviceToken != null ?
                new ObjectParameter("DeviceToken", deviceToken) :
                new ObjectParameter("DeviceToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateCustomerInfo", idParameter, userIdParameter, firstNameParameter, lastNameParameter, middleNameParameter, contactNumberParameter, emailParameter, userNameParameter, passwordParameter, addressParameter, landmarkParameter, countryIdParameter, cityIdParameter, locationIdParameter, createdDateParameter, updatedDateParameter, deviceTokenParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateLocation(Nullable<int> id, string name1, string name2, string code, Nullable<int> cityId, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateLocation", idParameter, name1Parameter, name2Parameter, codeParameter, cityIdParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateProduct(Nullable<int> id, string name1, string name2, string code, string description1, string description2, Nullable<double> price, Nullable<double> discountedPrice, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, Nullable<int> categoryId, string fileName, string fileLocation, string fileExtension, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var description1Parameter = description1 != null ?
                new ObjectParameter("Description1", description1) :
                new ObjectParameter("Description1", typeof(string));
    
            var description2Parameter = description2 != null ?
                new ObjectParameter("Description2", description2) :
                new ObjectParameter("Description2", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var discountedPriceParameter = discountedPrice.HasValue ?
                new ObjectParameter("DiscountedPrice", discountedPrice) :
                new ObjectParameter("DiscountedPrice", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileLocationParameter = fileLocation != null ?
                new ObjectParameter("FileLocation", fileLocation) :
                new ObjectParameter("FileLocation", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateProduct", idParameter, name1Parameter, name2Parameter, codeParameter, description1Parameter, description2Parameter, priceParameter, discountedPriceParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, categoryIdParameter, fileNameParameter, fileLocationParameter, fileExtensionParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateProject(Nullable<int> id, string name, string description, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateProject", idParameter, nameParameter, descriptionParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateRole(Nullable<int> id, string code, string name, string desc, Nullable<int> parentRoleId, string activityRightIds, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var parentRoleIdParameter = parentRoleId.HasValue ?
                new ObjectParameter("ParentRoleId", parentRoleId) :
                new ObjectParameter("ParentRoleId", typeof(int));
    
            var activityRightIdsParameter = activityRightIds != null ?
                new ObjectParameter("ActivityRightIds", activityRightIds) :
                new ObjectParameter("ActivityRightIds", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateRole", idParameter, codeParameter, nameParameter, descParameter, parentRoleIdParameter, activityRightIdsParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateStore(Nullable<int> id, string name1, string name2, string fileName, string fileLocation, string fileExtension, string address, string landMark, string cityName, string postelCode, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileLocationParameter = fileLocation != null ?
                new ObjectParameter("FileLocation", fileLocation) :
                new ObjectParameter("FileLocation", typeof(string));
    
            var fileExtensionParameter = fileExtension != null ?
                new ObjectParameter("FileExtension", fileExtension) :
                new ObjectParameter("FileExtension", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var landMarkParameter = landMark != null ?
                new ObjectParameter("LandMark", landMark) :
                new ObjectParameter("LandMark", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var postelCodeParameter = postelCode != null ?
                new ObjectParameter("PostelCode", postelCode) :
                new ObjectParameter("PostelCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateStore", idParameter, name1Parameter, name2Parameter, fileNameParameter, fileLocationParameter, fileExtensionParameter, addressParameter, landMarkParameter, cityNameParameter, postelCodeParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateUserInfo(Nullable<int> id, string userId, string firstName, string lastName, string middleName, string contactNumber, string email, string userName, string password, Nullable<int> roleId, string storeIds, Nullable<int> managerId, string address, Nullable<bool> isActive, Nullable<int> createdByUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var storeIdsParameter = storeIds != null ?
                new ObjectParameter("StoreIds", storeIds) :
                new ObjectParameter("StoreIds", typeof(string));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByUserIdParameter = createdByUserId.HasValue ?
                new ObjectParameter("CreatedByUserId", createdByUserId) :
                new ObjectParameter("CreatedByUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUserInfo", idParameter, userIdParameter, firstNameParameter, lastNameParameter, middleNameParameter, contactNumberParameter, emailParameter, userNameParameter, passwordParameter, roleIdParameter, storeIdsParameter, managerIdParameter, addressParameter, isActiveParameter, createdByUserIdParameter, createdDateParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateVendorInfo(Nullable<int> id, string userId, string firstName, string middleName, string lastName, string userName, string contactNumber, string mobileNumber, string email, string businessName, string gSTIN, string country, string state, string city, string password, string address1, string address2, string address3, string landmark, Nullable<int> pincode, Nullable<double> latitude, Nullable<double> longitude, Nullable<int> roleId, Nullable<int> servicetypeId, Nullable<int> statustypeId, Nullable<int> createdbyUserId, Nullable<System.DateTime> createdDate, Nullable<int> updatedbyUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var gSTINParameter = gSTIN != null ?
                new ObjectParameter("GSTIN", gSTIN) :
                new ObjectParameter("GSTIN", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var landmarkParameter = landmark != null ?
                new ObjectParameter("Landmark", landmark) :
                new ObjectParameter("Landmark", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var servicetypeIdParameter = servicetypeId.HasValue ?
                new ObjectParameter("ServicetypeId", servicetypeId) :
                new ObjectParameter("ServicetypeId", typeof(int));
    
            var statustypeIdParameter = statustypeId.HasValue ?
                new ObjectParameter("StatustypeId", statustypeId) :
                new ObjectParameter("StatustypeId", typeof(int));
    
            var createdbyUserIdParameter = createdbyUserId.HasValue ?
                new ObjectParameter("CreatedbyUserId", createdbyUserId) :
                new ObjectParameter("CreatedbyUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedbyUserIdParameter = updatedbyUserId.HasValue ?
                new ObjectParameter("UpdatedbyUserId", updatedbyUserId) :
                new ObjectParameter("UpdatedbyUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateVendorInfo", idParameter, userIdParameter, firstNameParameter, middleNameParameter, lastNameParameter, userNameParameter, contactNumberParameter, mobileNumberParameter, emailParameter, businessNameParameter, gSTINParameter, countryParameter, stateParameter, cityParameter, passwordParameter, address1Parameter, address2Parameter, address3Parameter, landmarkParameter, pincodeParameter, latitudeParameter, longitudeParameter, roleIdParameter, servicetypeIdParameter, statustypeIdParameter, createdbyUserIdParameter, createdDateParameter, updatedbyUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AssignOrdertoDeliveryAgent(Nullable<int> orderId, Nullable<int> deliveryAgentId, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var deliveryAgentIdParameter = deliveryAgentId.HasValue ?
                new ObjectParameter("DeliveryAgentId", deliveryAgentId) :
                new ObjectParameter("DeliveryAgentId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignOrdertoDeliveryAgent", orderIdParameter, deliveryAgentIdParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual ObjectResult<GetActivityRights_Result> GetActivityRights(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivityRights_Result>("GetActivityRights", idParameter);
        }
    
        public virtual ObjectResult<GetActivityRightsByRoleId_Result> GetActivityRightsByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivityRightsByRoleId_Result>("GetActivityRightsByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<GetAllAreas_Result> GetAllAreas(string cityName)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAreas_Result>("GetAllAreas", cityNameParameter);
        }
    
        public virtual ObjectResult<GetAllCategories_Result> GetAllCategories(Nullable<int> id, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCategories_Result>("GetAllCategories", idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllCities_Result> GetAllCities(Nullable<int> countryId, Nullable<int> id, Nullable<bool> isActive)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCities_Result>("GetAllCities", countryIdParameter, idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllCountries_Result> GetAllCountries(Nullable<int> id, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCountries_Result>("GetAllCountries", idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllLocations_Result> GetAllLocations(Nullable<int> cityId, Nullable<int> id, Nullable<bool> isActive)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLocations_Result>("GetAllLocations", cityIdParameter, idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllRoles_Result> GetAllRoles(Nullable<int> id, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoles_Result>("GetAllRoles", idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllStores_Result> GetAllStores(Nullable<int> id, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStores_Result>("GetAllStores", idParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllTypeCdDmt_Result> GetAllTypeCdDmt(Nullable<int> classTypeId)
        {
            var classTypeIdParameter = classTypeId.HasValue ?
                new ObjectParameter("ClassTypeId", classTypeId) :
                new ObjectParameter("ClassTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTypeCdDmt_Result>("GetAllTypeCdDmt", classTypeIdParameter);
        }
    
        public virtual ObjectResult<GetCategoriesByParentCategoryId_Result> GetCategoriesByParentCategoryId(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoriesByParentCategoryId_Result>("GetCategoriesByParentCategoryId", categoryIdParameter);
        }
    
        public virtual ObjectResult<GetOrderDetailsReport_Result> GetOrderDetailsReport(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderDetailsReport_Result>("GetOrderDetailsReport", orderCodeParameter);
        }
    
        public virtual ObjectResult<GetOrdersByAgentIdStoreId_Result> GetOrdersByAgentIdStoreId(Nullable<int> deliveryAgentId, Nullable<int> storeId, Nullable<int> statusTypeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var deliveryAgentIdParameter = deliveryAgentId.HasValue ?
                new ObjectParameter("DeliveryAgentId", deliveryAgentId) :
                new ObjectParameter("DeliveryAgentId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersByAgentIdStoreId_Result>("GetOrdersByAgentIdStoreId", deliveryAgentIdParameter, storeIdParameter, statusTypeIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetOrdersByStoreId_Result> GetOrdersByStoreId(Nullable<int> userId, Nullable<int> storeId, Nullable<int> statusTypeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersByStoreId_Result>("GetOrdersByStoreId", userIdParameter, storeIdParameter, statusTypeIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetProductsByCategoryIds_Result> GetProductsByCategoryIds(string categoryId, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var categoryIdParameter = categoryId != null ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductsByCategoryIds_Result>("GetProductsByCategoryIds", categoryIdParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<GetProductsByName_Result> GetProductsByName(string searchValue, Nullable<int> pageNo, Nullable<int> pageSize, Nullable<bool> isActive, string sortColumn, string sortOrder)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("SearchValue", searchValue) :
                new ObjectParameter("SearchValue", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductsByName_Result>("GetProductsByName", searchValueParameter, pageNoParameter, pageSizeParameter, isActiveParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<GetProductsByOrderId_Result> GetProductsByOrderId(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductsByOrderId_Result>("GetProductsByOrderId", orderIdParameter);
        }
    
        public virtual ObjectResult<GetProductsByUserCartId_Result> GetProductsByUserCartId(Nullable<int> userCartId)
        {
            var userCartIdParameter = userCartId.HasValue ?
                new ObjectParameter("UserCartId", userCartId) :
                new ObjectParameter("UserCartId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductsByUserCartId_Result>("GetProductsByUserCartId", userCartIdParameter);
        }
    
        public virtual int GetProjectsByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProjectsByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserInfoById_Result> GetUserInfoById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserInfoById_Result>("GetUserInfoById", idParameter);
        }
    
        public virtual ObjectResult<GetUserinfoByUserName_Result> GetUserinfoByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserinfoByUserName_Result>("GetUserinfoByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<GetUserOrdersByUserId_Result> GetUserOrdersByUserId(Nullable<int> userId, Nullable<int> pageNo, Nullable<int> pageSize)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserOrdersByUserId_Result>("GetUserOrdersByUserId", userIdParameter, pageNoParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<GetUsersByRoleId_Result> GetUsersByRoleId(string roleId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersByRoleId_Result>("GetUsersByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<GetUsersByRoleIdStoreId_Result> GetUsersByRoleIdStoreId(string roleId, Nullable<int> storeId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersByRoleIdStoreId_Result>("GetUsersByRoleIdStoreId", roleIdParameter, storeIdParameter);
        }
    
        public virtual ObjectResult<GetUsersBySearch_Result> GetUsersBySearch(string search, Nullable<int> roleId)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersBySearch_Result>("GetUsersBySearch", searchParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<GetUserStoresByUserId_Result> GetUserStoresByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserStoresByUserId_Result>("GetUserStoresByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<GetVendorInfoById_Result> GetVendorInfoById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorInfoById_Result>("GetVendorInfoById", idParameter);
        }
    
        public virtual int GetVideosByProjectIds(string projectIds, Nullable<int> userId)
        {
            var projectIdsParameter = projectIds != null ?
                new ObjectParameter("ProjectIds", projectIds) :
                new ObjectParameter("ProjectIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVideosByProjectIds", projectIdsParameter, userIdParameter);
        }
    
        public virtual ObjectResult<OrdersSummaryReport_Result> OrdersSummaryReport(Nullable<int> agentId, Nullable<int> customerId, Nullable<int> storeId, Nullable<int> statusTypeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdersSummaryReport_Result>("OrdersSummaryReport", agentIdParameter, customerIdParameter, storeIdParameter, statusTypeIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int UpdateOrderStatus(Nullable<int> orderId, Nullable<int> statusTypeId, string comments, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderStatus", orderIdParameter, statusTypeIdParameter, commentsParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int UpdateVendorStatus(Nullable<int> vendorId, Nullable<int> statusTypeId, Nullable<int> updatedByUserId, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(int));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVendorStatus", vendorIdParameter, statusTypeIdParameter, updatedByUserIdParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual ObjectResult<ValidateUser_Result> ValidateUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateUser_Result>("ValidateUser", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetVendorInfo_Result> GetVendorInfo(Nullable<int> vendorId, Nullable<int> serviceTypeId, Nullable<int> statusTypeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var serviceTypeIdParameter = serviceTypeId.HasValue ?
                new ObjectParameter("ServiceTypeId", serviceTypeId) :
                new ObjectParameter("ServiceTypeId", typeof(int));
    
            var statusTypeIdParameter = statusTypeId.HasValue ?
                new ObjectParameter("StatusTypeId", statusTypeId) :
                new ObjectParameter("StatusTypeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorInfo_Result>("GetVendorInfo", vendorIdParameter, serviceTypeIdParameter, statusTypeIdParameter, fromDateParameter, toDateParameter);
        }
    }
}
